<!-- start: Content -->

<div class="row-fluid sortable">
	<div class="box span12">
		<div class="box-header" data-original-title>
			<h2><i class="icon-cloud-upload"></i><span class="break"></span>Upload New Data</h2>
			<div class="box-icon">
				<!-- <a href="#" class="btn-setting"><i class="icon-wrench"></i></a>
				<a href="#" class="btn-minimize"><i class="icon-chevron-up"></i></a>
				<a href="#" class="btn-close"><i class="icon-remove"></i></a> -->
			</div>
		</div>
		<div class="box-content">
			<form class="form-horizontal">
				<fieldset>

				<div class="control-group">
					<label class="control-label" for="typeahead">Name of Report </label>
					<div class="controls">
					<input type="text" class="span6" id="filename">	
					</div>
				</div>

				<div class="control-group">
					<label class="control-label" for="typeahead">Building </label>
					<div class="controls">
					<select name="bldg" id="bldg">
					{{#each bldgs}}
					<option value={{this.bldg_id}} >{{this.name}} </option>
					{{/each}}
					</select>
					</div>
				</div>

				<!-- <div class="control-group">
					<label class="control-label" for="typeahead">Tags </label>
					<div class="controls">
					<input type="text" class="span6 typeahead" id="typeahead"  data-provide="typeahead" data-items="4" data-source='["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Dakota","North Carolina","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming"]'>
					
					</div>
				</div> -->
				

				<div class="control-group">
					<label class="control-label" for="fileInput">File input</label>
					<div class="controls">
					<div id="bootstrapped-fine-uploader"></div>
					</div>
				</div>          
				
				<div class="form-actions" id="form-btn">
					
					<a id="triggerUpload" class="btn btn-large btn-primary">Start Processing</a>
					
					<!-- <button type="reset" class="btn">Cancel</button> -->
				</div>
				<div id="message"></div>
				</fieldset>
			</form>   

		</div>
	</div><!--/span-->

</div><!--/row-->



		
<!-- end: Content -->

	<!-- start: JavaScript-->

		

	<script type="text/javascript">	
	function message_welcome1(){
		var unique_id = $.gritter.add({
			// (string | mandatory) the heading of the notification
			title: 'Welcome to Pangia',
			// (string | mandatory) the text inside the notification
			text: 'Please upload a BAS report so we can point you to anomalies',
			// (string | optional) the image to display on the left
			//image: 'lib/img/avatar.jpg',
			// (bool | optional) if you want it to fade out on its own or just sit there
			sticky: false,
			// (int | optional) the time you want it to be alive for before fading out
			time: '',
			// (string | optional) the class name you want to apply to that specific message
			class_name: 'my-sticky-class'
		});
	}
	
	$(document).ready(function(){
		
		setTimeout("message_welcome1()",2000);
		
	});			
	</script>
    <script>
function createUploader() {
        var uploader = new qq.FineUploader({
      element: document.getElementById('bootstrapped-fine-uploader'),
      request: {
        endpoint: 'uploader',
	params:{ 
		bldg: document.getElementById('bldg').value
	}
      },
      chunking: {
      	enabled: false
	   },
	   resume: {
	   	enabled: true
	   },
	  //don't allow multiple file uploads
	  multiple: false,
	  //only allow files of specific type
      validation: {
        allowedExtensions: ['csv', 'txt'],
      },
      autoUpload: false,
      text: {
            uploadButton: '<i class="icon-upload"></i> Select File'
          },
          template: '<div class="row-fluid"><div class="qq-uploader span6">' +
                      '<pre class="qq-upload-drop-area span6"><span>{dragZoneText}</span></pre>' +
                      '<div class="qq-upload-button btn" style="width: auto;">{uploadButtonText}</div>' +
                      '<span class="qq-drop-processing"><span>{dropProcessingText}</span><span class="qq-drop-processing-spinner"></span></span>' +
                      '<ul class="qq-upload-list" style="margin-top: 10px; text-align: center;"></ul>' +
                    '</div></div>',
      classes: {
            success: 'alert alert-success',
            fail: 'alert alert-error',
            info: 'alert alert-info'
          },
      showMessage: function(message) {
        // Using Twitter Bootstrap's classes and jQuery selector and method
        $('#bootstrapped-fine-uploader').append('<div class="row-fluid"><div class="alert alert-error span6">' + message + '</div><div class="span6">&nbsp;</div></div>');
      },
      failedUploadTextDisplay: {
        mode: 'custom',
        maxChars: 140,
        responseProperty: 'error',
        enableTooltip: true
      },
      debug: true,
      callbacks: {

//	onUpload: function(event, id, name){
//		var bldg_id = document.getElementById('bldg').value;
//		$(this).fineUploader('setParams', {'bldg': bldg_id});
//	},

        onComplete: function(id, fileName, responseJSON) {
          if (responseJSON.success) {
//             document.getElementById('form-btn').style.visibility='hidden';
//             document.getElementById('message').innerHTML = "We are now processing your data! We'll send you an email when it is done.";
//                 document.getElementById('file-' + id).removeClass('alert-info')
//                             .addClass('alert-success')
//                             .html('<i class="icon-ok"></i> ' +
//                                   'Successfully uploaded ' +
//                                   '“' + fileName + '”');
            $.gritter.add({
                        // (string | mandatory) the heading of the notification
                        title: 'Your data is being processed...',
                        // (string | mandatory) the text inside the notification
                        text: "We are now analyzing '"+fileName+"'. We'll send you an email when it is done.",
                        // (string | optional) the image to display on the left
                        //image: 'lib/img/avatar.jpg',
                        // (bool | optional) if you want it to fade out on its own or just sit there
                        sticky: true,
                        // (int | optional) the time you want it to be alive for before fading out
                        time: '',
                        // (string | optional) the class name you want to apply to that specific message
                        class_name: 'my-sticky-class'
                });
          }
          else{
            $.gritter.add({
                        // (string | mandatory) the heading of the notification
                        title: 'Error!',
                        // (string | mandatory) the text inside the notification
                        text: "We are unable to analyze your file. Please make sure the file is correctly formated.",
                        // (string | optional) the image to display on the left
                        //image: 'lib/img/avatar.jpg',
                        // (bool | optional) if you want it to fade out on its own or just sit there
                        sticky: false,
                        // (int | optional) the time you want it to be alive for before fading out
                        time: '',
                        // (string | optional) the class name you want to apply to that specific message
                        class_name: 'my-sticky-class'
                });
            
            }
        }
      }
    });
        
    $('#triggerUpload').click(function() {
      uploader.uploadStoredFiles();
    });
 };
 window.onload = createUploader;
    </script>
		<!-- end: JavaScript-->
